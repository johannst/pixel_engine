use std::collections::HashMap;

use crate::Pixel::*;
use crate::Sprite;
const X: usize = 6;
const Y: usize = 12;
type FontSprite = Sprite<{ X }, { Y }>;

macro_rules! sprite_from_bin {
    ($($bin:expr),+) => {
        {
            let b2p = |b| if b == 1 { C } else { U };
            let mut s = FontSprite { lines : [[ U; X ]; Y] };
            let mut _l = 0; // start with '_' to supress unused_assignments warning when repetition gets unrolled
            $(
                let mut line = [U; X];
                for i in 0..X {
                    line[i] = b2p(($bin >> (X - 1 - i)) & 0x1);
                }
                s.lines[_l] = line;
                _l += 1;
            )+
            s
        }
    }
}

lazy_static! {
    static ref FONT: HashMap<char, FontSprite> = {
        let mut m = HashMap::new();
        m.insert(
            'A',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b111110, 0b100010,
                0b100010, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'B',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111100, 0b100010, 0b100010, 0b111100, 0b100010, 0b100010,
                0b100010, 0b111100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'C',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100000, 0b100000, 0b100000, 0b100000,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'D',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111000, 0b100100, 0b100010, 0b100010, 0b100010, 0b100010,
                0b100100, 0b111000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'E',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b100000, 0b100000, 0b111100, 0b100000, 0b100000,
                0b100000, 0b111110, 0b000000, 0b000000
            ),
        );
        m.insert(
            'F',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b100000, 0b100000, 0b111100, 0b100000, 0b100000,
                0b100000, 0b100000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'G',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100000, 0b100000, 0b101100, 0b100010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'H',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b111110, 0b100010,
                0b100010, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'I',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b001000, 0b001000, 0b001000, 0b001000, 0b001000,
                0b001000, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'J',
            sprite_from_bin!(
                0b000000, 0b000000, 0b001110, 0b000010, 0b000010, 0b000010, 0b000010, 0b100010,
                0b100010, 0b011000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'K',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100100, 0b101000, 0b110000, 0b110000, 0b101000,
                0b100100, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'L',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100000, 0b100000, 0b100000, 0b100000, 0b100000, 0b100000,
                0b100000, 0b111110, 0b000000, 0b000000
            ),
        );
        m.insert(
            'M',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b110110, 0b101010, 0b101010, 0b100010, 0b100010,
                0b100010, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'N',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b110010, 0b101010, 0b100110, 0b100010,
                0b100010, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'O',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'P',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111100, 0b100010, 0b100010, 0b100010, 0b111100, 0b100000,
                0b100000, 0b100000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'Q',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b100010, 0b101010,
                0b011100, 0b000010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'R',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111100, 0b100010, 0b100010, 0b100010, 0b111100, 0b101000,
                0b100100, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'S',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100000, 0b011100, 0b000010, 0b000010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'T',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b001000, 0b001000, 0b001000, 0b001000, 0b001000,
                0b001000, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'U',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            'V',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b100010, 0b010100, 0b010100, 0b010100,
                0b001000, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'W',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b101010, 0b101010,
                0b110110, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'X',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b010100, 0b001000, 0b001000, 0b010100,
                0b100010, 0b100010, 0b000000, 0b000000
            ),
        );
        m.insert(
            'Y',
            sprite_from_bin!(
                0b000000, 0b000000, 0b100010, 0b100010, 0b010100, 0b001000, 0b001000, 0b001000,
                0b001000, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            'Z',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b000010, 0b000100, 0b001000, 0b010000, 0b100000,
                0b100000, 0b111110, 0b000000, 0b000000
            ),
        );
        m.insert(
            '0',
            sprite_from_bin!(
                0b000000, 0b000000, 00011100, 0b100010, 0b100110, 0b101010, 0b110010, 0b100010,
                0b100010, 00011100, 00000000, 00000000
            ),
        );
        m.insert(
            '1',
            sprite_from_bin!(
                0b000000, 0b000000, 0b001000, 0b011000, 0b001000, 0b001000, 0b001000, 0b001000,
                0b001000, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            '2',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b000100, 0b001000, 0b010000,
                0b100000, 0b111110, 0b000000, 0b000000
            ),
        );
        m.insert(
            '3',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b000010, 0b001100, 0b000010, 0b000010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            '4',
            sprite_from_bin!(
                0b000000, 0b000000, 0b000010, 0b000110, 0b001010, 0b010010, 0b100010, 0b111110,
                0b000010, 0b000010, 0b000000, 0b000000
            ),
        );
        m.insert(
            '5',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b100000, 0b100000, 0b111100, 0b000010, 0b000010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            '6',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100000, 0b100000, 0b111100, 0b100010, 0b100010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            '7',
            sprite_from_bin!(
                0b000000, 0b000000, 0b111110, 0b000010, 0b000010, 0b000100, 0b000100, 0b001000,
                0b001000, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            '8',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b011100, 0b100010, 0b100010,
                0b100010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            '9',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b011110, 0b000010,
                0b000010, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            ' ',
            sprite_from_bin!(
                0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000,
                0b000000, 0b000000, 0b000000, 0b000000
            ),
        );
        m.insert(
            ',',
            sprite_from_bin!(
                0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000100,
                0b000100, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            ':',
            sprite_from_bin!(
                0b000000, 0b000000, 0b000000, 0b000000, 0b001000, 0b001000, 0b000000, 0b000000,
                0b001000, 0b001000, 0b000000, 0b000000
            ),
        );
        m.insert(
            '-',
            sprite_from_bin!(
                0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b111110, 0b000000,
                0b000000, 0b000000, 0b000000, 0b000000
            ),
        );
        m.insert(
            '[',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b010000, 0b010000, 0b010000, 0b010000, 0b010000,
                0b010000, 0b011100, 0b000000, 0b000000
            ),
        );
        m.insert(
            ']',
            sprite_from_bin!(
                0b000000, 0b000000, 0b011100, 0b000100, 0b000100, 0b000100, 0b000100, 0b000100,
                0b000100, 0b011100, 0b000000, 0b000000
            ),
        );

        m
    };
}

pub fn get_sprite(letter: char) -> &'static FontSprite {
    match FONT.get(&letter) {
        Some(s) => s,
        None => {
            dbg!(letter);
            unimplemented!();
        }
    }
}
